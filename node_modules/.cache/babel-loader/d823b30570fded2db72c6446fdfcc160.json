{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/felipeferreira/Documents/00 - coding/Employee-Directory/empdir/src/pages/Employees.js\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"../components/Container\";\nimport SearchResults from \"../components/SearchResults\";\nimport SearchForm from \"../components/SearchForm\";\n\nclass Search extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      employee: [],\n      results: [],\n      error: \"\",\n      employeeListChanges: []\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      let storedEmployees = JSON.parse(localStorage.getItem(\"Employees\"));\n      let filteredEmployees = storedEmployees.filter(letter => letter.name.first.includes(value));\n      this.setState({\n        results: filteredEmployees\n      });\n    };\n\n    this.sortEmployees = () => {\n      let storedEmployees = JSON.parse(localStorage.getItem(\"Employees\")); // Use toUpperCase() to ignore character casing\n\n      const nameA = newEmployeeList.name.first.toUpperCase();\n      const nameB = newEmployeeList.name.first.toUpperCase();\n      let comparison = 0;\n\n      if (nameA > nameB) {\n        comparison = 1;\n      } else if (nameA < nameB) {\n        comparison = -1;\n      }\n\n      console.log(comparison);\n      return comparison;\n    };\n\n    this.toggleSortFirstName = () => {\n      let newEmployeeList = JSON.parse(localStorage.getItem(\"Employees\"));\n      console.log(newEmployeeList);\n      this.setState({\n        employeeListChanges: newEmployeeList.sort((a, b) => a.name.first > b.name.first)\n      });\n      localStorage.setItem(\"Employees\", JSON.stringify(newEmployeeList));\n    };\n  }\n\n  componentDidMount() {\n    let storedEmployees = JSON.parse(localStorage.getItem(\"Employees\"));\n\n    if (storedEmployees != null) {\n      this.setState({\n        results: storedEmployees\n      });\n    } else {\n      API.getEmployees().then(res => {\n        this.setState({\n          results: res.data.results\n        });\n        localStorage.setItem(\"Employees\", JSON.stringify(res.data.results));\n      }).catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          minHeight: \"80%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Employee Directory!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n          handleInputChange: this.handleInputChange,\n          employee: this.state.employee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n          results: this.state.results\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/felipeferreira/Documents/00 - coding/Employee-Directory/empdir/src/pages/Employees.js"],"names":["React","Component","useEffect","useState","API","Container","SearchResults","SearchForm","Search","state","search","employee","results","error","employeeListChanges","handleInputChange","event","value","target","storedEmployees","JSON","parse","localStorage","getItem","filteredEmployees","filter","letter","name","first","includes","setState","sortEmployees","nameA","newEmployeeList","toUpperCase","nameB","comparison","console","log","toggleSortFirstName","sort","a","b","setItem","stringify","componentDidMount","getEmployees","then","res","data","catch","err","render","minHeight"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"../components/Container\";\nimport SearchResults from \"../components/SearchResults\";\nimport SearchForm from \"../components/SearchForm\";\n\nclass Search extends Component {\n\n  state = {\n    search: \"\",\n    employee: [],\n    results: [],\n    error: \"\",\n    employeeListChanges:[]\n  };\n\n  componentDidMount() {\n    let storedEmployees = JSON.parse(localStorage.getItem(\"Employees\"));\n    if (storedEmployees != null) {\n        this.setState({ results: storedEmployees })\n    }\n    else{\n        API.getEmployees()\n        .then(res => {\n        this.setState({ results: res.data.results })\n        localStorage.setItem(\"Employees\", JSON.stringify(res.data.results))\n        })\n        .catch(err => console.log(err));}\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    let storedEmployees = JSON.parse(localStorage.getItem(\"Employees\"));\n    let filteredEmployees = storedEmployees.filter(letter => letter.name.first.includes(value))\n    this.setState({ results: filteredEmployees });\n  };\n\nsortEmployees = () => {\n    let storedEmployees = JSON.parse(localStorage.getItem(\"Employees\"));\n    // Use toUpperCase() to ignore character casing\n    const nameA = newEmployeeList.name.first.toUpperCase();\n    const nameB = newEmployeeList.name.first.toUpperCase();\n    let comparison = 0;\n    if (nameA > nameB) {\n    comparison = 1;\n    } else if (nameA < nameB) {\n    comparison = -1; \n    }\n    console.log(comparison)\n    return comparison;\n  }\n\ntoggleSortFirstName = () =>{\n    let newEmployeeList = JSON.parse(localStorage.getItem(\"Employees\"));\n    console.log(newEmployeeList)\n    this.setState({\n        employeeListChanges: newEmployeeList.sort((a, b) => a.name.first > b.name.first)\n    })\n    localStorage.setItem(\"Employees\", JSON.stringify(newEmployeeList))\n}\n\n  render() {\n    return (\n      <div>\n        <Container style={{ minHeight: \"80%\" }}>\n          <h1 className=\"text-center\">Employee Directory!</h1>\n          \n          <SearchForm\n            handleInputChange={this.handleInputChange}\n            employee={this.state.employee}\n          />\n          <SearchResults results={this.state.results} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}